#!/usr/bin/env ruby
#
# This file is part of SitecoreScan
# https://github.com/bcoles/sitecore_scan
#

require 'sitecore_scan'
require 'optparse'
require 'resolv'

def banner
  puts "
   _____ _ _                           _____                 
  / ____(_) |                         / ____|                
 | (___  _| |_ ___  ___ ___  _ __ ___| (___   ___ __ _ _ __  
  \\___ \\| | __/ _ \\/ __/ _ \\| '__/ _ \\\\___ \\ / __/ _` | '_ \\ 
  ____) | | ||  __/ (_| (_) | | |  __/____) | (_| (_| | | | |
 |_____/|_|\\__\\___|\\___\\___/|_|  \\___|_____/ \\___\\__,_|_| |_|
                                               version #{SitecoreScan::VERSION}"
  puts
  puts '-' * 60
end

banner
options = {}
opts = OptionParser.new do |o|
  o.banner = "Usage: sitecore-scan [options]"

  o.on('-u URL', '--url URL', 'Sitecore URL to scan') do |v|
    unless v.match(%r{\Ahttps?://})
      puts "- Invalid URL: #{v}"
      exit(1)
    end
    options[:url] = v
  end

  o.on('-s', '--skip', 'Skip check for Sitecore') do
    options[:skip] = true
  end

  o.on('-i', '--insecure', 'Skip SSL/TLS validation') do
    options[:insecure] = true
  end

  o.on('-v', '--verbose', 'Enable verbose output') do
    options[:verbose] = true
  end

  o.on('-h', '--help', 'Show this help') do
    puts opts
    exit
  end
end

opts.parse!

if options[:url].nil?
 puts opts
 exit(1)
end

def scan(url, check: true, insecure: false, verbose: false)
  SitecoreScan.logger = ::Logger.new($stdout).tap do |log|
    log.progname = 'sitecore-scan'
    log.level = verbose ? ::Logger::INFO : ::Logger::WARN
    log.datetime_format = '%Y-%m-%d %H:%M:%S '
  end

  SitecoreScan.insecure = insecure

  puts "Scan started at #{Time.now.getutc}"
  puts "URL: #{url}"

  # parse URL
  target = nil
  begin
    target = URI::parse(url.split('?').first)
  rescue
    puts "- Could not parse target URL: #{url}"
  end
  exit(1) if target.nil?

  # resolve IP address
  begin
    ip = Resolv.getaddress(target.host).to_s
    puts "IP: #{ip}" unless ip.nil?
  rescue
    puts "- Could not resolve hostname #{target.host}"
  end

  puts "Port: #{target.port}"
  puts '-' * 60

  # Check if the URL is Sitecore
  if check
    unless SitecoreScan::detectSitecore(url)
      puts '- Sitecore not found'
      exit(1)
    end
    puts '+ Found Sitecore'
  end

  # Retrieve Sitecore version from Login page
  version = SitecoreScan::getVersionFromLogin(url)
  puts "+ Version: #{version}" if version

  # Check if Glimpse debugging is enabled
  puts "+ Glimpse debugging is enabled" if SitecoreScan::glimpseDebugging(url)

  # Check if SOAP API is accessible
  puts "+ SOAP API is available" if SitecoreScan::soapApi(url)

  # Check if MVC Device Simulator allows file disclosure
  puts "+ MVC Device Simulator allows file disclosure" if SitecoreScan::mvcDeviceSimulatorFileDisclosure(url)

  # Check if Executive Insight Dashboard reporting is accessible
  puts "+ Executive Insight Dashboard reporting is available" if SitecoreScan::dashboardReporting(url)

  # Check if Telerik Web UI is accessible
  puts "+ Telerik Web Ui is available" if SitecoreScan::telerikWebUi(url)

  puts "Scan finished at #{Time.now.getutc}"
  puts '-' * 60
end

scan(
  options[:url],
  insecure: options[:insecure],
  check: !options[:skip],
  verbose: options[:verbose]
)
